#! /bin/bash

STEP0(){ DEBUG="STEP0 in install/20_MC2P.conf"
LIST_MACHINE="$LIST_MACHINE MC2P"
}

# Sets some vars
# If system version of a package is available use it
# this is unecessary if one want to do it manually
STEP1(){ DEBUG="STEP1 in install/20_MC2P.conf"
if [ "$MACHINE" = "MC2P" ]; then
    COMP="GCC"
 OPENMPI="SYS"; VERSION_OPENMPI="1.1.16.5" #Better perf (25%)
    DOWN="NO"
fi
}

# Sets some vars
# And prepare the environment
# Only module load and exports are mandatory
STEP2(){ DEBUG="STEP2 in install/20_MC2P.conf"
if [ "$MACHINE" = "MC2P" ]; then

    module purge > /dev/null 2>&1
    alias cmake=/opt/cmake/2.8.11/bin/cmake

                                module load Utils/python          && MODULES_LIST="$MODULES_LIST Utils/python"
                                module unload Parallel/openmpi-1.4.3 Compilateurs/gnu
    [[ "$COMP" = "ICC" ]]    && module load Compilateurs/intel12  && MODULES_LIST="$MODULES_LIST Compilateurs/intel12"
    [[ "$COMP" = "GCC" ]]    && module load Compilateurs/gnu      && MODULES_LIST="$MODULES_LIST Compilateurs/gnu"
    [[ "$COMP" = "GCC" ]]    && module load Compilateurs/gnu-4.7  && MODULES_LIST="$MODULES_LIST Compilateurs/gnu-4.7"
                                module load Librairies/acml       && MODULES_LIST="$MODULES_LIST Librairies/acml"
    [[ "$OPENMPI" = "SYS" ]] && module load Parallel/mvapich2-1.8 && MODULES_LIST="$MODULES_LIST Parallel/mvapich2-1.8"

    [[ "$COMP" = "ICC" ]]    && export       ACML_ROOT="$ACML_ROOT/ifort64"                && EXPORT_LIST="$EXPORT_LIST ACML_ROOT"
    [[ "$COMP" = "GCC" ]]    && export       ACML_ROOT="$ACML_ROOT/gfortran64"             && EXPORT_LIST="$EXPORT_LIST ACML_ROOT"
                                export           CPATH="$ACML_ROOT/include:$CPATH"         && EXPORT_LIST="$EXPORT_LIST CPATH"
    [[ "$OPENMPI" = "SYS" ]] && export            PATH="$BIN_OPENMPI/bin:$PATH"            && EXPORT_LIST="$EXPORT_LIST PATH"
    [[ "$OPENMPI" = "SYS" ]] && export LD_LIBRARY_PATH="$BIN_OPENMPI/lib:$LD_LIBRARY_PATH" && EXPORT_LIST="$EXPORT_LIST LD_LIBRARY_PATH"

    [[ "$OPENMPI" = "SYS" ]] && BIN_OPENMPI="$MPIHOME"

    EXTRA_CONF="$EXTRA_CONF --with-blas-type=ACML --with-blas-include=$ACML_ROOT/include --with-blas-lib=$ACML_ROOT/lib"
fi
}

#======================================================== Compilators
#============================================================ Options
STEP3(){ DEBUG="STEP3 in install/20_MC2P.conf"
if [ "$MACHINE" = "MC2P" ];then
    if [ "$COMP" = "ICC" ]; then
      #Parallel C compilator
       P_CC="icc"
      #Parallel FORTRAN compilator
       P_FC="ifort"
      #Parallel FORTRAN 77 compilator
      P_F77="ifort"
      #Parallel C++ compilator 
      P_CXX="icpc"

      FLAGS_OPTIM="$FLAGS_OPTIM -O1 -xsse2"
    else
      #Sequential C compilator
       S_CC="/share/apps/gcc/4.7/bin/gcc-4.7"
      #Sequential FORTRAN compilator
       S_FC="/share/apps/gcc/4.7/bin/gfortran-4.7"
      #Sequential FORTRAN 77 compilator
      S_F77="/share/apps/gcc/4.7/bin/gfortran-4.7"
      #Sequential C++ compilator
      S_CXX="/share/apps/gcc/4.7/bin/c++-4.7"
      #Parallel C compilator
       P_CC="$S_CC"
      #Parallel FORTRAN compilator
       P_FC="$S_FC"
      #Parallel FORTRAN 77 compilator
      P_F77="$S_F77"
      #Parallel C++ compilator
      P_CXX="$S_CXX"
fi 
    if [ "$OPENMPI" = "SYS" ]; then
      export LDFLAGS="$LDFLAGS -L$BIN_OPENMPI/lib -lmpich -libumad -libmad -lrdmacm -lmpl -lopa -lpthread -libverbs -ldl -lrt -lz"
      export FLAGS_OPTIM="$FLAGS_OPTIM -I$BIN_OPENMPI/include"
      export FLAGS_DEBUG="$FLAGS_DEBUG -I$BIN_OPENMPI/include"
fi 
fi 
}

STEP8(){ DEBUG="STEP8 in install/20_MC2P.conf"
  if [ "$MACHINE" = "MC2P" ]&&[ "$VERSION_SATURNE" = "3.2.1" ]; then # may be necessary with other versions
    cd $BIN_SATURNE
    tac $SCRIPTPATH/RESSOURCES \
                 | grep 'PATCH CODE_SATURNE BEGIN' -B 50 -m1 | tac\
                 | grep 'PATCH CODE_SATURNE END' -B 50 -m1 | head -n-1 | tail -n+2 > $PREFIX/patch
    patch lib/python2.6/site-packages/code_saturne/cs_exec_environment.py $PREFIX/patch > make.5.log 2>&1 || STOP
    rm $PREFIX/patch
  fi
  cd $PREFIX
}

#STEP9(){ DEBUG="STEP9 in install/20_MC2P.conf"
#}

  STEP$1 2>/dev/null


